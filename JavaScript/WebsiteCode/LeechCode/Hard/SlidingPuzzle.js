// 0ms 48.65MB
/**
 * @param {number[][]} board
 * @return {number}
 */

function arrayToString(arr) {
    return arr.flat().join('');
};
function getCoords(board) {
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            if (board[i][j] == 0) return [i,j]
        }
    }
    return -1;
};

function inversion(board) {
    let K = 0;
    let sum = 0;

    let arr = board.flat();

    for (let ii = 0; ii < arr.length; ii++) {
        if (arr[ii] == K) continue;
        for (let jj = ii+1; jj < arr.length; jj++) {
            if (arr[jj] < arr[ii] && arr[jj] != 0) sum++;
        }
    }
    return sum;
}
function solvable(board) {
    let K = 0;

    let m = board.length;
    let n = board[0].length;
    let inversion_sum = inversion(board);
    let e = m - getCoords(board)[0];

    if (
        (n%2 != 0 && inversion_sum%2 == 0) ||
        (n%2 == 0 && inversion_sum%2 == 0 && e%2 != 0) ||
        (n%2 == 0 && inversion_sum%2 != 0 && e%2 == 0)

    ) return true;
    else return false;
}

function makeMove(board) {
    let [row, col] = getCoords(board);
    let moves = [];
    const directions = [[-1,0], [1,0], [0,-1], [0, 1]];
    
    for ([d_row, d_col] of directions) {
        let new_board = board.map((row) => {return [...row]});
        let i = row+d_row;
        let j = col+d_col;
        if (i >= 0 && i < 2 && j >= 0 && j <3) {
            [new_board[row][col], new_board[i][j]] =  [new_board[i][j], new_board[row][col]];
            moves.push(new_board);
        }
    }
    return moves;
}
const HASH =
{
  '102345': 14,
  '102453': 2,
  '102534': 14,
  '103254': 14,
  '103425': 2,
  '103542': 16,
  '104235': 16,
  '104352': 14,
  '104523': 12,
  '105243': 16,
  '105324': 12,
  '105432': 6,
  '120345': 13,
  '120453': 1,
  '120534': 13,
  '123045': 2,
  '123405': 1,
  '123450': 0,
  '124053': 10,
  '124503': 11,
  '124530': 12,
  '125034': 10,
  '125304': 11,
  '125340': 12,
  '130254': 15,
  '130425': 3,
  '130542': 17,
  '132054': 14,
  '132504': 15,
  '132540': 16,
  '134025': 14,
  '134205': 15,
  '134250': 16,
  '135042': 6,
  '135402': 5,
  '135420': 4,
  '140235': 17,
  '140352': 15,
  '140523': 13,
  '142035': 16,
  '142305': 15,
  '142350': 16,
  '143052': 16,
  '143502': 15,
  '143520': 14,
  '145023': 18,
  '145203': 17,
  '145230': 18,
  '150243': 15,
  '150324': 13,
  '150432': 5,
  '152043': 4,
  '152403': 3,
  '152430': 4,
  '153024': 12,
  '153204': 13,
  '153240': 14,
  '154032': 12,
  '154302': 13,
  '154320': 14,
  '201354': 18,
  '201435': 16,
  '201543': 12,
  '203145': 4,
  '203451': 12,
  '203514': 12,
  '204153': 8,
  '204315': 16,
  '204531': 14,
  '205134': 8,
  '205341': 14,
  '205413': 16,
  '210354': 19,
  '210435': 17,
  '210543': 13,
  '213054': 14,
  '213504': 13,
  '213540': 14,
  '214035': 18,
  '214305': 17,
  '214350': 18,
  '215043': 18,
  '215403': 17,
  '215430': 18,
  '230145': 5,
  '230451': 13,
  '230514': 13,
  '231045': 16,
  '231405': 15,
  '231450': 14,
  '234051': 16,
  '234501': 15,
  '234510': 14,
  '235014': 8,
  '235104': 7,
  '235140': 6,
  '240153': 7,
  '240315': 15,
  '240531': 13,
  '241053': 10,
  '241503': 11,
  '241530': 12,
  '243015': 6,
  '243105': 5,
  '243150': 6,
  '245031': 12,
  '245301': 13,
  '245310': 14,
  '250134': 9,
  '250341': 15,
  '250413': 15,
  '251034': 18,
  '251304': 17,
  '251340': 16,
  '253041': 14,
  '253401': 13,
  '253410': 14,
  '254013': 10,
  '254103': 9,
  '254130': 10,
  '301245': 14,
  '301452': 12,
  '301524': 18,
  '302154': 12,
  '302415': 16,
  '302541': 18,
  '304125': 12,
  '304251': 14,
  '304512': 14,
  '305142': 8,
  '305214': 10,
  '305421': 12,
  '310245': 13,
  '310452': 13,
  '310524': 17,
  '312045': 16,
  '312405': 15,
  '312450': 14,
  '314052': 16,
  '314502': 15,
  '314520': 16,
  '315024': 12,
  '315204': 11,
  '315240': 12,
  '320154': 13,
  '320415': 15,
  '320541': 19,
  '321054': 20,
  '321504': 19,
  '321540': 20,
  '324015': 14,
  '324105': 13,
  '324150': 14,
  '325041': 14,
  '325401': 13,
  '325410': 14,
  '340125': 11,
  '340251': 15,
  '340512': 15,
  '341025': 14,
  '341205': 15,
  '341250': 16,
  '342051': 16,
  '342501': 17,
  '342510': 16,
  '345012': 10,
  '345102': 9,
  '345120': 10,
  '350142': 9,
  '350214': 11,
  '350421': 13,
  '351042': 14,
  '351402': 13,
  '351420': 14,
  '352014': 12,
  '352104': 11,
  '352140': 10,
  '354021': 14,
  '354201': 13,
  '354210': 12,
  '401253': 8,
  '401325': 12,
  '401532': 8,
  '402135': 18,
  '402351': 14,
  '402513': 6,
  '403152': 18,
  '403215': 6,
  '403521': 10,
  '405123': 20,
  '405231': 10,
  '405312': 10,
  '410253': 7,
  '410325': 11,
  '410532': 7,
  '412053': 4,
  '412503': 5,
  '412530': 6,
  '413025': 4,
  '413205': 5,
  '413250': 6,
  '415032': 8,
  '415302': 9,
  '415320': 10,
  '420135': 19,
  '420351': 15,
  '420513': 7,
  '421035': 14,
  '421305': 13,
  '421350': 14,
  '423051': 10,
  '423501': 9,
  '423510': 8,
  '425013': 18,
  '425103': 19,
  '425130': 20,
  '430152': 19,
  '430215': 7,
  '430521': 11,
  '431052': 10,
  '431502': 9,
  '431520': 10,
  '432015': 18,
  '432105': 19,
  '432150': 20,
  '435021': 10,
  '435201': 9,
  '435210': 8,
  '450123': 21,
  '450231': 11,
  '450312': 11,
  '451023': 10,
  '451203': 9,
  '451230': 10,
  '452031': 14,
  '452301': 13,
  '452310': 12,
  '453012': 18,
  '453102': 19,
  '453120': 20,
  '501234': 16,
  '501342': 12,
  '501423': 12,
  '502143': 6,
  '502314': 14,
  '502431': 16,
  '503124': 10,
  '503241': 14,
  '503412': 16,
  '504132': 10,
  '504213': 12,
  '504321': 14,
  '510234': 15,
  '510342': 13,
  '510423': 13,
  '512034': 16,
  '512304': 15,
  '512340': 14,
  '513042': 16,
  '513402': 15,
  '513420': 14,
  '514023': 14,
  '514203': 13,
  '514230': 14,
  '520143': 7,
  '520314': 15,
  '520431': 15,
  '521043': 14,
  '521403': 13,
  '521430': 14,
  '523014': 10,
  '523104': 9,
  '523140': 8,
  '524031': 16,
  '524301': 15,
  '524310': 16,
  '530124': 11,
  '530241': 15,
  '530412': 17,
  '531024': 18,
  '531204': 17,
  '531240': 16,
  '532041': 18,
  '532401': 17,
  '532410': 18,
  '534012': 12,
  '534102': 11,
  '534120': 12,
  '540132': 9,
  '540213': 13,
  '540321': 13,
  '541032': 10,
  '541302': 11,
  '541320': 12,
  '542013': 8,
  '542103': 7,
  '542130': 8,
  '543021': 12,
  '543201': 13,
  '543210': 14,
  '1234500': 0,
  '023145': 3,
  '013425': 3,
  '012453': 3,
  '052143': 5,
  '043215': 7,
  '035142': 7,
  '015432': 7,
  '042513': 7,
  '035214': 9,
  '025134': 9,
  '024153': 9,
  '041253': 9,
  '041532': 9,
  '054213': 11,
  '045312': 11,
  '051423': 11,
  '035421': 11,
  '045231': 11,
  '023514': 11,
  '053124': 11,
  '054132': 11,
  '031452': 11,
  '023451': 11,
  '043521': 11,
  '015324': 13,
  '014523': 13,
  '052314': 13,
  '032154': 13,
  '034125': 13,
  '041325': 13,
  '021543': 13,
  '034512': 13,
  '051342': 13,
  '054321': 15,
  '034251': 15,
  '031245': 15,
  '012345': 15,
  '012534': 15,
  '024315': 15,
  '021435': 15,
  '052431': 15,
  '042351': 15,
  '024531': 15,
  '025341': 15,
  '013254': 15,
  '014352': 15,
  '053241': 15,
  '042135': 17,
  '051234': 17,
  '043152': 17,
  '013542': 17,
  '014235': 17,
  '053412': 17,
  '032415': 17,
  '015243': 17,
  '025413': 17,
  '031524': 19,
  '032541': 19,
  '021354': 19,
  '045123': 19
}

function buildTree() {
    let HASH = {};
    let step = 0;
    let start_board = [[1,2,3], [4,5,0]];
    let queue = [start_board];
    let find_board = arrayToString(board);

    while(queue.length > 0) {
        let level = queue.length;
        for (let i = 0; i < level; i++) {
            let curr_board = queue.shift();
            let curr_key = arrayToString(curr_board);

            if (!JSON.stringify(HASH).includes(curr_key)) {
                let moves = makeMove(curr_board);
                queue.push(...moves);
                HASH[curr_key] = step;
            }
        }
        step++;
    }
}

var slidingPuzzle = function(board) {
    if (!solvable(board)) return -1;

    let find_board = arrayToString(board);

    for (let key in HASH) {
        if (key == find_board) {
            return HASH[key];
        }
    }
    return -1;
};

// 22ms 55.55MB
/**
 * @param {number[][]} board
 * @return {number}
 */
var slidingPuzzle = function (board) {
    // Directions for possible swaps based on '0' position
    const dir = [[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5], [2, 4]];
    const target = "123450";
    const vis = new Set(); // Track visited configurations
    const q = [];
    let start = "";

    // Convert 2D board to a single string
    for (let row of board) {
        for (let col of row) {
            start += col;
        }
    }

    q.push(start);
    vis.add(start);
    let step = 0;

    // Perform BFS
    while (q.length > 0) {
        let size = q.length;
        for (let i = 0; i < size; i++) {
            let current = q.shift();

            // Check if target is reached
            if (current === target) return step;

            let zero = current.indexOf('0'); // Find position of '0'

            // Generate next moves
            for (let move of dir[zero]) {
                let next = current.split('');
                [next[zero], next[move]] = [next[move], next[zero]];
                next = next.join('');

                if (!vis.has(next)) { // Add unvisited states to the queue
                    vis.add(next);
                    q.push(next);
                }
            }
        }
        step++;
    }
    return -1; // Return -1 if target is unreachable
};